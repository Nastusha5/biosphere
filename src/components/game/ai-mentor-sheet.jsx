
'use client';

import { useState, useRef, useEffect } from 'react';
import { Bot, User, Send, Loader2, X, CornerDownLeft } from 'lucide-react';
import styles from './ai-mentor-sheet.module.css';

const askAiMentor = async ({ question, history }) => {
    console.log("Asking AI Mentor:", { question, history });
    await new Promise(resolve => setTimeout(resolve, 1500));
    const responses = [
        "–ë—ñ–æ—Å—Ñ–µ—Ä–∞-2 ‚Äî —Ü–µ —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –Ω–∞—É–∫–æ–≤–∞ —Å–ø–æ—Ä—É–¥–∞, —â–æ —Å–∏–º—É–ª—é—î —Ä—ñ–∑–Ω—ñ –∑–µ–º–Ω—ñ –µ–∫–æ—Å–∏—Å—Ç–µ–º–∏. –Ø–∫—ñ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å?",
        "–í —Å–∞–≤–∞–Ω—ñ –≥–æ–ª–æ–≤–Ω–∏–º–∏ —Ö–∏–∂–∞–∫–∞–º–∏ —î –ª–µ–≤–∏, –∞ –≤ –æ–∫–µ–∞–Ω—ñ ‚Äî –≤–µ–ª–∏–∫—ñ –∞–∫—É–ª–∏. –¶–µ —Å—Ç–≤–æ—Ä—é—î –±–∞–ª–∞–Ω—Å —É —Ç—Ä–æ—Ñ—ñ—á–Ω—ñ–π –º–µ—Ä–µ–∂—ñ.",
        "–ü—É—Å—Ç–µ–ª—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å –¥—É–∂–µ –º–∞–ª–æ –æ–ø–∞–¥—ñ–≤, —Ç–æ–º—É —Ä–æ—Å–ª–∏–Ω–∏ —Ç–∞–º, —è–∫-–æ—Ç –∫–∞–∫—Ç—É—Å–∏, –ø—Ä–∏—Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è –Ω–∞–∫–æ–ø–∏—á—É–≤–∞—Ç–∏ –≤–æ–¥—É.",
        "–ê–≥—Ä–æ–µ–∫–æ—Å–∏—Å—Ç–µ–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ª—é–¥–∏–Ω–æ—é –¥–ª—è –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞ —ó–∂—ñ. –í–æ–Ω–∏ –º–µ–Ω—à —Å—Ç—ñ–π–∫—ñ, –Ω—ñ–∂ –ø—Ä–∏—Ä–æ–¥–Ω—ñ, —ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –¥–æ–≥–ª—è–¥—É.",
        "–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –¥—É–∂–µ —Ü—ñ–∫–∞–≤–µ! –î–∞–≤–∞–π—Ç–µ —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—è —Ä–∞–∑–æ–º. –©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ —Ü–µ?"
    ];
    return responses[Math.floor(Math.random() * responses.length)];
};

const MarkdownRenderer = ({ content }) => {
    const renderContent = () => {
        const blocks = content.split('\n\n');
        return blocks.map((block, index) => {
            if (block.startsWith('*') || block.startsWith('-')) {
                const items = block.split('\n').map((item, i) => (
                    <li key={i} className={styles.proseListItem}>{item.substring(2)}</li>
                ));
                return <ul key={index} className={styles.proseList}>{items}</ul>;
            }
            return <p key={index} className={styles.proseParagraph}>{block}</p>;
        });
    };
    return <div className={styles.prose}>{renderContent()}</div>;
};

export function AiMentorSheet({ open, onOpenChange }) {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const scrollAreaRef = useRef(null);
  const textareaRef = useRef(null);

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages, isLoading]);

  useEffect(() => {
    if (textareaRef.current) {
        textareaRef.current.style.height = 'auto';
        textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [input]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = { role: 'user', parts: [{ text: input }] };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const history = messages.slice(-10); 
      const response = await askAiMentor({ question: input, history });
      const assistantMessage = { role: 'model', parts: [{ text: response }] };
      setMessages((prev) => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Error asking AI mentor:', error);
      const errorMessage = { role: 'model', parts: [{ text: '–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑.' }] };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  if (!open) return null;

  return (
    <div className={styles.sheetOverlay} onClick={() => onOpenChange(false)}>
      <div className={styles.sheetContent} onClick={(e) => e.stopPropagation()}>
        <div className={styles.sheetHeader}>
            <div>
                <h2 className={styles.sheetTitle}>
                    <Bot />
                    AI-–º–µ–Ω—Ç–æ—Ä
                </h2>
                <p className={styles.sheetDescription}>
                    –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ –ë—ñ–æ—Å—Ñ–µ—Ä–∏-2
                </p>
            </div>
            <button onClick={() => onOpenChange(false)} className={styles.closeButton}><X /></button>
        </div>
        <div className={styles.scrollArea} ref={scrollAreaRef}>
          <div className={styles.messageContainer}>
            {messages.length === 0 && (
                <div className={styles.noMessages}>
                    <div className={styles.noMessagesIcon}>ü§ñ</div>
                    <p>–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. <br/>–ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É!</p>
                </div>
            )}
            {messages.map((m, i) => {
                const messageText = m.parts.map(p => p.text).join('');
                return (
                  <div
                    key={i}
                    className={`${styles.message} ${m.role === 'user' ? styles.userMessage : styles.modelMessage}`}>
                    <div className={styles.avatar}>
                      {m.role === 'model' ? <Bot size={20} /> : <User size={20} />}
                    </div>
                    <div className={styles.messageContent}>
                      {m.role === 'model' ? <MarkdownRenderer content={messageText} /> : messageText}
                    </div>
                  </div>
                )
            })}
            {isLoading && (
                <div className={`${styles.message} ${styles.modelMessage}`}>
                    <div className={styles.avatar}>
                        <Bot size={20} />
                    </div>
                    <div className={styles.loadingBubble}>
                         <Loader2 className={styles.loadingIcon} />
                    </div>
                </div>
            )}
          </div>
        </div>
        <div className={styles.sheetFooter}>
          <form onSubmit={handleSubmit} className={styles.form}>
            <textarea
              ref={textareaRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="–ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è AI-–º–µ–Ω—Ç–æ—Ä—É..."
              className={styles.textarea}
              rows={1}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSubmit(e);
                }
              }}
              disabled={isLoading}
            />
            <button type="submit" disabled={isLoading || !input.trim()} className={styles.sendButton}>
              <Send className={styles.sendIcon} />
            </button>
          </form>
        </div>
      </div>
    </div>
  );
}
